@using Microsoft.Extensions.Localization

@using Oqtane.Modules.Controls
@using StudioElf.LocSharedRes.Services
@using StudioElf.LocSharedRes.Models
@using StudioElf.LocSharedRes.Client

@namespace StudioElf.LocSharedRes
@inherits ModuleBase
@inject ILocSharedResService LocSharedResService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="name" HelpText="@SharedLocalizer["Name.HelpText"]">@SharedLocalizer["Name"]</Label>
        </td>
        @*ResourceKey="Name" doesnt work*@
        <td>
            <input id="name" class="form-control" @bind="@_name" />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">@Localizer["Save"]</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["Cancel"]</NavLink>
<br />
<br />
@if (PageState.Action == "Edit")
{
<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>}

@code { public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage LocSharedRes";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _name;
    string _createdby;
    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                LocSharedRes LocSharedRes = await LocSharedResService.GetLocSharedResAsync(_id, ModuleState.ModuleId);
                if (LocSharedRes != null)
                {
                    _name = LocSharedRes.Name;
                    _createdby = LocSharedRes.CreatedBy;
                    _createdon = LocSharedRes.CreatedOn;
                    _modifiedby = LocSharedRes.ModifiedBy;
                    _modifiedon = LocSharedRes.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LocSharedRes {LocSharedResId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading LocSharedRes", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if (!string.IsNullOrEmpty(_name))
            {
                if (PageState.Action == "Add")
                {
                    LocSharedRes LocSharedRes = new LocSharedRes();
                    LocSharedRes.ModuleId = ModuleState.ModuleId;
                    LocSharedRes.Name = _name;
                    LocSharedRes = await LocSharedResService.AddLocSharedResAsync(LocSharedRes);
                    await logger.LogInformation("LocSharedRes Added {LocSharedRes}", LocSharedRes);
                }
                else
                {
                    LocSharedRes LocSharedRes = await LocSharedResService.GetLocSharedResAsync(_id, ModuleState.ModuleId);
                    LocSharedRes.Name = _name;
                    await LocSharedResService.UpdateLocSharedResAsync(LocSharedRes);
                    await logger.LogInformation("LocSharedRes Updated {LocSharedRes}", LocSharedRes);
                }
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                AddModuleMessage("The Name Is Required", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving LocSharedRes {Error}", ex.Message);
            AddModuleMessage("Error Saving LocSharedRes", MessageType.Error);
        }
    } }
