@using Microsoft.Extensions.Localization

@using StudioElf.LocSharedRes.Services
@using StudioElf.LocSharedRes.Models
@using StudioElf.LocSharedRes.Client

@namespace StudioElf.LocSharedRes
@inherits ModuleBase
@inject ILocSharedResService LocSharedResService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_LocSharedRess == null)
{
    <p><em>@Localizer["Loading"]</em></p> }
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ResourceKey="Add" Text="Add LocSharedRes" />
    <br />
    <br />
    @if (@_LocSharedRess.Count != 0)
    {
        <Pager Items="@_LocSharedRess">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>@SharedLocalizer["Name"]</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.LocSharedResId.ToString())" /></td>
                <td><ActionDialog ResourceKey="Delete" Header="Delete LocSharedRes" Message="@Localizer["Are You Sure You Wish To Delete The {0}?", context.Name]" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager> }
    else
    {
    <p>@Localizer["NothingToDisplay"]</p>}}

@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<LocSharedRes> _LocSharedRess;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _LocSharedRess = await LocSharedResService.GetLocSharedRessAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LocSharedRes {Error}", ex.Message);
            AddModuleMessage("Error Loading LocSharedRes", MessageType.Error);
        }
    }

    private async Task Delete(LocSharedRes LocSharedRes)
    {
        try
        {
            await LocSharedResService.DeleteLocSharedResAsync(LocSharedRes.LocSharedResId, ModuleState.ModuleId);
            await logger.LogInformation("LocSharedRes Deleted {LocSharedRes}", LocSharedRes);
            _LocSharedRess = await LocSharedResService.GetLocSharedRessAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting LocSharedRes {LocSharedRes} {Error}", LocSharedRes, ex.Message);
            AddModuleMessage("Error Deleting LocSharedRes", MessageType.Error);
        }
    } }